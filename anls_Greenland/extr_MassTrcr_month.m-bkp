% Save monthly mean tracer mass
% in every grid cell intergated over
% depth levels: 0-50, 50-150, 150-300, 0-btm
% THis is needed to assess S change 

addpath /usr/people/ddmitry/codes/MyMatlab/;
addpath /usr/people/ddmitry/codes/MyMatlab/hycom_utils;
addpath /usr/people/ddmitry/codes/MyMatlab/colormaps;
addpath /usr/people/ddmitry/codes/anls_mtlb_utils/hycom_arc08;
addpath /usr/people/ddmitry/codes/anls_mtlb_utils/hycom_NOPP_rivers
startup;

close all
clear


yr1=2016;
yr2=2016;


s_mat = 1; % =0 - do not save mat file
           % =1 - save tracer and overwrite existing mat
	   % =2 - skip months where mat file exist

if s_mat==0,
  fprintf('Mat file is not created\n');
elseif s_mat == 1
  fprintf('Mat file will be saved, old mat file will be overridden\n');
elseif s_mat == 2
  fprintf('Extraction is skipped for months where old mat files exist\n');
end


rg = 9806; 
%cBr = 15.86; % coefficient for Bering Str. tracer
cBr = sub_BeringTrConc(0);% coefficient for Bering Str., tracer, kg/m3

%yr0 = 2005; 

LR(1,:) = [0,-50];
LR(2,:) = [-50,-150];
LR(3,:) = [0,-10000]; % full water column
LR(4,:) = [-150, -300];
nlrs= 4; 

fprintf('Years to extract: %i-%i\n',yr1,yr2);

% Experiments:
% 102 - test simulation, HYCOM GLBb0.08 nest: 1 file kept constant (1993,1,1)

regn = 'ARCc0.08';
expt = 110;  
%pthfig  = sprintf('/Net/ocean/ddmitry/HYCOM/ARCc/ARCc0.08/%3.3i/fig_trac/',expt);
pthfig = sprintf('/Net/mars/ddmitry/hycom/%s/%3.3i/fig_trac/',regn,expt);
pthtopo = '/Net/ocean/ddmitry/HYCOM/ARCc/ARCc0.08/topo_grid/';
pthmat  = sprintf('/Net/ocean/ddmitry/HYCOM/ARCc/ARCc0.08/%3.3i/data_mat/',expt);


ftopo = sprintf('%s/depth_%s_11.nc',pthtopo,regn); % 
HH  = nc_varget(ftopo,'Bathymetry');
LON = nc_varget(ftopo,'Longitude');
LAT = nc_varget(ftopo,'Latitude');
[mm,nn]=size(LON);

% Grid cell spacing
[DX,DY]=sub_dx_dy(LON,LAT);
Acell=DX.*DY; % Grid cell area, m2

hmsk=HH;
hmsk(HH<0)=nan;

xlim1 = 0;
xlim2 = nn;
ylim1 = 0;
ylim2 = mm;

% Read fields:
ip1=1;
mold = 0;
yrold = yr1;
dday = 5; 
for iyr = yr1:yr2
  yr=iyr;
%  for iday = 337:dday:366
  id1=336;
%  id1=1;
  
  for iday = id1:dday:365
    pthbin = sprintf('/nexsan/archive/%s_%3.3i/data/%i/',regn,expt,yr)

    dnmb=datenum(yr,1,1)+iday-1;
    DV=datevec(dnmb);
    imo=DV(2);
    fprintf('Processing Month %i\n',imo);

% skip processed months if needed
    if s_mat == 2
      fmat = sprintf('%sMassTr_lrs_%i%2.2i.mat',pthmat,iyr,imo);
      if exist(fmat,'file')
	fprintf('Exist %s, skipping %i/%3.3i\n',fmat,yr,iday);
%    keyboard
	continue
      end
    end
    
    if mold~=imo
      if exist('TRCR','var') & s_mat>0 & mold>0
	nrec = TRCR(1).nrec;
	if nrec == 0,
	  error('# of saved records = 0');
	else
	  fprintf('Monthly mean, # of av. rcrds=%i\n',nrec);
	end
	
	fprintf('Saving TRCR...\n');
	for nTr=1:5
	  for ik=1:nlrs
	    dmm = squeeze(TRCR(ik).MassTr_kg(nTr,:,:));
	    TRCR(ik).MassTr_kg(nTr,:,:) = dmm./nrec;
	  end
	end	
	for ik=1:nlrs
	  dmm = TRCR(ik).layer_thck_m;
	  TRCR(ik).layer_thck_m = dmm./nrec;
	end

	
%        fmat = sprintf('%strcr_dpthav_%i%2.2i.mat',pthmat,yrold,mold);
        fmat = sprintf('%sMassTr_lrs_%i%2.2i.mat',pthmat,yrold,mold);
        fprintf('Saving %s\n',fmat);
        save(fmat,'TRCR');
      end
      
      clear TRCR
      for ik=1:nlrs
        TRCR(ik).nrec=0;
        TRCR(ik).MassTr_kg(5,mm,nn)=0;
	TRCR(ik).layer_thck_m(mm,nn)=0;
      end
      mold = imo;
      yrold = iyr;
      nrec = 0; 
    end

    fina = sprintf('%s%3.3i_archm.%4.4i_%3.3i_12.a',pthbin,expt,yr,iday);
    finb = sprintf('%s%3.3i_archm.%4.4i_%3.3i_12.b',pthbin,expt,yr,iday);
  
    if ~exist(fina,'file');
      fprintf('Not found: %s\n\n',fina);
      continue;
    end
    

    nrec = nrec+1;
    tic;
    for nTr = 1:5
      fprintf('Tr# %i, %4.4i_%2.2i_%2.2i: %s\n',...
	  nTr,DV(1:3),fina);
      [F,nn,mm,ll] = read_hycom(fina,finb,'tracer','r_tracer',nTr);
      F(F>1e6)=nan;
      
% For Pacific Water,
% Convert nondim concentration 1 to 
% actual FW flux-based conc.
% used Woodgate & Aagaard estimate of Bering FW flux
%
      if nTr==5, 
	fprintf('Adjusting Bering Strait flux\n');
	F = F*cBr;
      end

      Ctr = F; % kg/m3

      if nTr == 1
	fprintf('Getting layer depths ...\n');
        [ZM,ZZ] = sub_zz_zm(fina, finb,HH,'f_btm',1);
      end
% Integrate tracer over the depths:
% then divide by layer depths = mean tr. conc within 
% specified depth levels
      fprintf('Integrating Tracers over depths ...\n');
% Find mean S for layer ilv
      for ilv=1:nlrs
	Zk  = HH*0;
	cZk = HH*0; % count v. layers
	zz1=LR(ilv,1);
	zz2=LR(ilv,2);
	for kk=1:ll
	  zz= squeeze(ZZ(kk,:,:));
	  I=find(HH<zz2 & zz>=zz2 & zz<zz1);
	  if ilv==3
	    zzn= squeeze(ZZ(kk+1,:,:));
	    I=find(~isnan(zz) & ~isnan(zzn)); % find bottom
	  end
	  if isempty(I); continue; end;
	  if max(max(zz))<zz2, break; end;
	  Zk(I)=kk;
	  cZk(I)=cZk(I)+1;
	end

        Zk(Zk==0)=nan; % bottom layer within the depth interval
        Zt=Zk-cZk+1;   % top layer
        MTr = HH*0; % Tracer mass
        lmx = max(max(Zk));
        hZ  = HH*0;
        smm = HH*0;
        for kk=1:lmx
	  I=find(Zk>=kk & Zt<=kk);
	  if isempty(I), continue; end;
	  dZ=abs(squeeze(ZZ(kk+1,:,:))-squeeze(ZZ(kk,:,:)));
	  hZ(I)=hZ(I)+dZ(I);
      %  if isnan(hZ(300,600)); keyboard; end;
	  smm = smm+squeeze(Ctr(kk,:,:)).*dZ.*Acell; % kg
	  MTr(I) = smm(I);
%	Sav(I) = smm(I)./hZ(I); % depth-integrated Mass
        end
        MTr(MTr==0)=nan;
      
	TRCR(ilv).TM = dnmb;
	TRCR(ilv).depths = LR(ilv,:);
	TRCR(ilv).MassTr_kg(nTr,:,:)=...
	    squeeze(TRCR(ilv).MassTr_kg(nTr,:,:))+MTr;
	TRCR(ilv).layer_thck_m = hZ; 
	TRCR(ilv).nrec=nrec;

      end % levels
      
    end;   % nTr - tracers

    fprintf('==== Processing 1 day, %i tracers %5.1f min\n',nTr,toc/60);

  end % iday

% Save at the end of the year
  if exist('TRCR','var') & s_mat>0 
    nrec = TRCR(1).nrec;
    if nrec == 0,
      error('# of saved records = 0');
    else
      fprintf('Monthly mean, # of av. rcrds=%i\n',nrec);
    end

    fprintf('Saving TRCR...\n');
    for nTr=1:5
      for ik=1:nlrs
        dmm = squeeze(TRCR(ik).MassTr_kg(nTr,:,:));
        TRCR(ik).MassTr_kg(nTr,:,:) = dmm./nrec;
      end
    end	
    for ik=1:nlrs
      dmm = TRCR(ik).layer_thck_m;
      TRCR(ik).layer_thck_m = dmm./nrec;
    end
    
    fmat = sprintf('%sMassTr_lrs_%i%2.2i.mat',pthmat,yrold,mold);
    fprintf('Saving %s\n',fmat);
    save(fmat,'TRCR');
  end

end

%keyboard



